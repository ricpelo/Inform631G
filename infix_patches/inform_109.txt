Index: inform.c
===================================================================
RCS file: /cygdrive/c/Temp/Inform6/cvsroot/inform/compiler/inform.c,v
retrieving revision 1.8
retrieving revision 1.9
diff -u -r1.8 -r1.9
--- inform.c	29 Jul 2004 02:29:44 -0000	1.8
+++ inform.c	21 Aug 2004 23:43:49 -0000	1.9
@@ -259,8 +259,8 @@
 static int cli_files_specified,
            convert_filename_flag;
 
-char Source_Name[100];                 /* Processed name of first input file */
-char Code_Name[100];                   /* Processed name of output file      */
+char Source_Name[PATHLEN];             /* Processed name of first input file */
+char Code_Name[PATHLEN];               /* Processed name of output file      */
 
 static char *cli_file1, *cli_file2;    /* Unprocessed (and unsafe to alter)  */
 
@@ -429,6 +429,11 @@
                  && (path != Language_Name) && (path != Charset_Map)
                  && (i>0) && (isalnum(path[i-1]))) path[i++] = FN_SEP;
             path[i++] = value[j++];
+            if (i == PATHLEN-1) {
+                printf("A specified path is longer than %d characters.\n", 
+                    PATHLEN-1);
+                exit(1);
+            }
             if (value[j-1] == 0) return;
         }
         else path[i++] = value[j++];
@@ -494,6 +499,10 @@
                                  char *prefix_path, int start_pos,
                                  char *extension)
 {   int x;
+    if (strlen(old_name)+strlen(extension) >= PATHLEN) {
+        printf("One of your filenames is longer than %d characters.\n", PATHLEN);
+        exit(1);
+    }
     if (prefix_path == NULL)
     {   sprintf(new_name,"%s%s", old_name, extension);
         return 0;
@@ -501,6 +510,10 @@
     strcpy(new_name, prefix_path + start_pos);
     for (x=0; (new_name[x]!=0) && (new_name[x]!=FN_ALT); x++) ;
     if (new_name[x] == 0) start_pos = 0; else start_pos += x+1;
+    if (x+strlen(old_name)+strlen(extension) >= PATHLEN) {
+        printf("One of your pathnames is longer than %d characters.\n", PATHLEN);
+        exit(1);
+    }
     sprintf(new_name + x, "%s%s", old_name, extension);
     return start_pos;
 }
@@ -668,6 +681,7 @@
                 case 6: extension = V6Code_Extension; break;
                 case 7: extension = V7Code_Extension; break;
                 case 8: extension = V8Code_Extension; break;
+                case 9: extension = V9Code_Extension; break;
             }
         }
         else {
@@ -862,6 +876,10 @@
         case 2: p=Temp2_Name; break;
         case 3: p=Temp3_Name; break;
     }
+    if (strlen(Temporary_Path)+strlen(Temporary_File)+6 >= PATHLEN) {
+        printf ("Temporary_Path is too long.\n");
+        exit(1);
+    }
     sprintf(p,"%s%s%d", Temporary_Path, Temporary_File, i);
 #ifdef INCLUDE_TASK_ID
     sprintf(p+strlen(p), "_proc%08lx", (long int) unique_task_id());
@@ -968,12 +986,12 @@
 
     select_target(glulx_mode);
 
-    if (define_INFIX_switch && glulx_mode) {
+/*    if (define_INFIX_switch && glulx_mode) {
         printf("Infix (-X) facilities are not available in Glulx: \
 disabling -X switch\n");
         define_INFIX_switch = FALSE;
     }
-
+*/
     if (module_switch && glulx_mode) {
         printf("Modules are not available in Glulx: \
 disabling -M switch\n");
@@ -1012,7 +1030,9 @@
         close_transcript_file();
     }
 
-    if (no_errors==0) { output_file(); output_has_occurred = TRUE; }
+    if (no_errors==0) output_file(); 
+
+    if (no_errors==0) { output_has_occurred = TRUE; }
     else { output_has_occurred = FALSE; }
 
     if (debugfile_switch) close_debug_file();
@@ -1350,14 +1370,14 @@
 {   printf("Error in ICL header of file '%s', line %d:\n", filename, line);
 }
 
-static int copy_icl_word(char *from, char *to)
+static int copy_icl_word(char *from, char *to, int max)
 {
     /*  Copies one token from 'from' to 'to', null-terminated:
         returns the number of chars in 'from' read past (possibly 0).  */
 
-    int i, j, quoted_mode;
+    int i, j, quoted_mode, truncated;
 
-    i = 0;
+    i = 0; truncated = 0;
     while ((from[i] == ' ') || (from[i] == TAB_CHARACTER)
            || (from[i] == (char) 10) || (from[i] == (char) 13)) i++;
 
@@ -1374,8 +1394,15 @@
         if ((from[i] == ' ') && (!quoted_mode)) break;
         if (from[i] == '\"') { quoted_mode = !quoted_mode; i++; }
         else to[j++] = from[i++];
+        if (j == max) {
+            j--;
+            truncated = 1;
+        }
     }
-    to[j] = 0; return i;
+    to[j] = 0;
+    if (truncated == 1)
+        printf("The following parameter has been truncated:\n%s\n", to);
+    return i;
 }
 
 static void execute_icl_command(char *p);
@@ -1405,10 +1432,10 @@
     line++;
     if (!(cli_buff[0] == '!' && cli_buff[1] == '%'))
       break;
-    i = copy_icl_word(cli_buff+2, fw);
+    i = copy_icl_word(cli_buff+2, fw, 256);
     if (icl_command(fw)) {
       execute_icl_command(fw);
-      copy_icl_word(cli_buff+2 + i, fw);
+      copy_icl_word(cli_buff+2 + i, fw, 256);
       if ((fw[0] != 0) && (fw[0] != '!')) {
         icl_header_error(filename, line);
         errcount++;
@@ -1437,10 +1464,10 @@
     while (feof(command_file)==0)
     {   if (fgets(cli_buff,256,command_file)==0) break;
         line++;
-        i = copy_icl_word(cli_buff, fw);
+        i = copy_icl_word(cli_buff, fw, 256);
         if (icl_command(fw))
         {   execute_icl_command(fw);
-            copy_icl_word(cli_buff + i, fw);
+            copy_icl_word(cli_buff + i, fw, 256);
             if ((fw[0] != 0) && (fw[0] != '!'))
             {   icl_error(filename, line);
                 printf("expected comment or nothing but found '%s'\n", fw);
@@ -1449,8 +1476,8 @@
         else
         {   if (strcmp(fw, "compile")==0)
             {   char story_name[PATHLEN], code_name[PATHLEN];
-                i += copy_icl_word(cli_buff + i, story_name);
-                i += copy_icl_word(cli_buff + i, code_name);
+                i += copy_icl_word(cli_buff + i, story_name, PATHLEN);
+                i += copy_icl_word(cli_buff + i, code_name, PATHLEN);
 
                 if (code_name[0] != 0) x=2;
                 else if (story_name[0] != 0) x=1;
@@ -1466,7 +1493,7 @@
                     case 2: printf("[Compiling <%s> to <%s>]\n",
                                 story_name, code_name);
                             compile(x, story_name, code_name);
-                            copy_icl_word(cli_buff + i, fw);
+                            copy_icl_word(cli_buff + i, fw, 256);
                             if (fw[0]!=0)
                             {   icl_error(filename, line);
                         printf("Expected comment or nothing but found '%s'\n",
@@ -1540,7 +1567,7 @@
 #ifdef PROMPT_INPUT
 static void read_command_line(int argc, char **argv)
 {   int i;
-    char buffer1[100], buffer2[100], buffer3[100];
+    char buffer1[PATHLEN], buffer2[PATHLEN], buffer3[PATHLEN];
     i=0;
     printf("Source filename?\n> ");
     while (gets(buffer1)==NULL); cli_file1=buffer1;
