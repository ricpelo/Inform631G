Index: veneer.c
===================================================================
RCS file: /cygdrive/c/Temp/Inform6/cvsroot/inform/compiler/veneer.c,v
retrieving revision 1.10
retrieving revision 1.11
diff -u -r1.10 -r1.11
--- veneer.c	26 Aug 2004 18:49:23 -0000	1.10
+++ veneer.c	29 Aug 2004 22:18:20 -0000	1.11
@@ -1396,7 +1396,7 @@
          \" in the\"; switch(size&7){0,1:q=0; 2:print \" string\";\
          q=1; 3:print \" table\";q=1; 4:print \" buffer\";q=WORDSIZE;} \
          if(size&16) print\" (->)\"; if(size&8) print\" (-->)\";\
-         \" array ~\", (string) #array_names_offset-->(p+1),\
+         \" array ~\", (string) #array_names_offset-->p,\
          \"~, which has entries \", q, \" up to \",id,\" **]\"; }\
          if (crime >= 24 && crime <=27) { if (crime<=25) print \"read\";\
          else print \"write\"; print \" outside memory using \";\
@@ -2155,6 +2155,7 @@
     null_dbgl.b1 = 0; null_dbgl.b2 = 0; null_dbgl.b3 = 0; null_dbgl.cc = 0;
 
     veneer_mode = TRUE; j = symbol_index("Symb__Tab", -1);
+    local_variables.keywords[0] = "a"; /* ensure no _vararg_count header */
     assign_symbol(j,
         assemble_routine_header(2, FALSE, "Symb__Tab", &null_dbgl, FALSE, j),
         ROUTINE_T);
@@ -2284,7 +2285,109 @@
         return;
     }
 
-    error("*** Infix symbol-table routine is not yet implemented. ***");
+    AO.value = 1; AO.type = LOCALVAR_OT; AO.marker = 0;
+    AO2.type = BYTECONSTANT_OT; AO2.marker = 0;
+    AO3.type = CONSTANT_OT; AO3.marker = 0;
+
+    arrays_l = next_label++;
+    routines_l = next_label++;
+    constants_l = next_label++;
+
+    sequence_point_follows = FALSE;
+    AO2.value = 1;
+    assembleg_2_branch(jeq_gc, AO, AO2, arrays_l);
+    sequence_point_follows = FALSE;
+    AO2.value = 2;
+    assembleg_2_branch(jeq_gc, AO, AO2, routines_l);
+    sequence_point_follows = FALSE;
+    AO2.value = 3;
+    assembleg_2_branch(jeq_gc, AO, AO2, constants_l);
+    sequence_point_follows = FALSE;
+    assembleg_1(return_gc, one_operand);
+
+    assemble_label_no(arrays_l);
+    AO.value = 2;
+    for (j=0; j<no_arrays; j++)
+    {   {   AO2.value = j;
+            if (AO2.value<128) AO2.type = BYTECONSTANT_OT;
+            else if (AO2.value<32768) AO2.type = HALFCONSTANT_OT;
+            else AO2.type = CONSTANT_OT;
+            nl = next_label++;
+            sequence_point_follows = FALSE;
+            assembleg_2_branch(jne_gc, AO, AO2, nl);
+            AO3.value = array_sizes[j];
+            AO3.marker = 0;
+            assembleg_store(temp_var2, AO3);
+            AO3.value = array_types[j];
+            if (sflags[array_symbols[j]] & (INSF_SFLAG+SYSTEM_SFLAG))
+                AO3.value = AO3.value + 16;
+            AO3.marker = 0;
+            assembleg_store(temp_var3, AO3);
+            AO3.value = svals[array_symbols[j]];
+            AO3.marker = ARRAY_MV;
+            assembleg_1(return_gc, AO3);
+            assemble_label_no(nl);
+        }
+    }
+    sequence_point_follows = FALSE;
+    assembleg_1(return_gc, one_operand);
+
+    assemble_label_no(routines_l);
+    for (j=0; j<no_named_routines; j++)
+    {   AO2.value = j;
+        if (AO2.value<128) AO2.type = BYTECONSTANT_OT;
+        else if (AO2.value<32768) AO2.type = HALFCONSTANT_OT;
+        else AO2.type = CONSTANT_OT;
+        nl = next_label++;
+        sequence_point_follows = FALSE;
+        assembleg_2_branch(jne_gc, AO, AO2, nl);
+        AO3.value = 0;
+        if (sflags[named_routine_symbols[j]]
+            & (INSF_SFLAG+SYSTEM_SFLAG)) AO3.value = 16;
+        AO3.marker = 0;
+        assembleg_store(temp_var3, AO3);
+        AO3.value = svals[named_routine_symbols[j]];
+        AO3.marker = IROUTINE_MV;
+        assembleg_1(return_gc, AO3);
+        assemble_label_no(nl);
+    }
+    sequence_point_follows = FALSE;
+    assembleg_1(return_gc, one_operand);
+
+    assemble_label_no(constants_l);
+    for (j=0, no_named_constants=0; j<no_symbols; j++)
+    {   if (((stypes[j] == OBJECT_T) || (stypes[j] == CLASS_T)
+            || (stypes[j] == CONSTANT_T))
+            && ((sflags[j] & (UNKNOWN_SFLAG+ACTION_SFLAG))==0))
+        {   AO2.value = no_named_constants++;
+            if (AO2.value<128) AO2.type = BYTECONSTANT_OT;
+            else if (AO2.value<32768) AO2.type = HALFCONSTANT_OT;
+            else AO2.type = CONSTANT_OT;
+            nl = next_label++;
+            sequence_point_follows = FALSE;
+            assembleg_2_branch(jne_gc, AO, AO2, nl);
+            AO3.value = 0;
+            if (stypes[j] == OBJECT_T) AO3.value = 2;
+            if (stypes[j] == CLASS_T) AO3.value = 1;
+            if (sflags[j] & (INSF_SFLAG+SYSTEM_SFLAG))
+                AO3.value = AO3.value + 16;
+            AO3.marker = 0;
+            assembleg_store(temp_var3, AO3);
+            AO3.value = j;
+            AO3.marker = SYMBOL_MV;
+            assembleg_1(return_gc, AO3);
+            assemble_label_no(nl);
+        }
+    }
+    no_named_constants = 0; AO3.marker = 0;
+
+    sequence_point_follows = FALSE;
+    assembleg_1(return_gc, zero_operand);
+    variable_usage[1] = TRUE;
+    variable_usage[2] = TRUE;
+    assemble_routine_end(FALSE, &null_dbgl);
+    veneer_mode = FALSE;
+
   }
 }
 
